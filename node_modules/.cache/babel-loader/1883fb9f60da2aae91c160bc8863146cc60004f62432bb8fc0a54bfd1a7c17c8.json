{"ast":null,"code":"var _jsxFileName = \"/home/dennies/Development/code/phase-2/CatFacts-Project-App/src/components/CatFact.js\",\n  _s = $RefreshSig$();\n/*import React, { useState } from 'react';\n\nfunction CatFact() {\n  const [fact, setFact] = useState('');\n\n\n  var requestOptions = {\n    method: 'GET',\n    redirect: 'follow'\n  };\n  \n  fetch(\"https://meowfacts.herokuapp.com/\", requestOptions)\n    .then(response => response.json())\n    .then(result => console.log(result))\n    .catch(error => console.log('error', error));\n\n /*const fetchCatFact = async () => {\n    try {\n      const response = await fetch('https://meowfacts.herokuapp.com/');\n      if (response.ok) {\n        const data = await response.json();\n        const catFact = data.data;\n        console.log(catFact); // You can handle the catFact data as needed (e.g., updating state in a React component)\n      } else {\n        console.error('Failed to fetch cat fact');\n      }\n    } catch (error) {\n      console.error('Error fetching cat fact:', error);\n    }\n  };*/\n\n// Call the fetchCatFact function to fetch a cat fact\n/*fetchCatFact();\n\n return (\n  <div className=\"content\">\n    <h2>Cat Fact</h2>\n    <button onClick={fetchCatFact}>Get New Fact</button>\n    {fact && <p>{fact}</p>}\n  </div>\n);\n}\nexport default CatFact;*/\n\n/*import React, { useState } from 'react';\n\nfunction CatFact() {\n  const [fact, setFact] = useState('');\n\n  const fetchCatFact = () => {\n    // Fetch a random cat fact from an API (e.g., https://meowfacts.herokuapp.com/)\n    // and set the fact state.\n    fetch('https://meowfacts.herokuapp.com/')\n      .then((res) => res.json())\n      .then((data) => setFact(data.data))\n      .catch(() => console.error('Failed to fetch cat fact'));\n  };\n\n  return (\n    <div className=\"content\">\n      <h2>Cat Fact</h2>\n      <button onClick={fetchCatFact}>Get New Fact</button>\n      {fact ? <p>{fact}</p> : null}\n    </div>\n  );\n}\n\n  /*};\n\n  return (\n    <div className=\"content\">\n      <h2>Cat Fact</h2>\n      <button onClick={fetchCatFact}>Get New Fact</button>\n      {fact && <p>{fact}</p>}\n    </div>\n  );\n}*/\n\n//export default CatFact;\n\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CatFact() {\n  _s();\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    fetchCatFact();\n  }, []); // Empty dependency array ensures that this effect runs once after the initial render\n\n  const fetchCatFact = () => {\n    fetch('https://meowfacts.herokuapp.com/').then(response => response.json()).then(apiData => {\n      // Assuming the API response is an array of cat facts, update the state\n      setData(apiData);\n    }).catch(error => {\n      console.error('Error fetching cat facts:', error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: datadata.map((catFact, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: catFact\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n}\n_s(CatFact, \"IEMTtLVFIuToo7X/raQbJAxzNQU=\");\n_c = CatFact;\nexport default CatFact;\n\n/*<div className=\"content\">\n  <h2>Cat Fact</h2>\n  <button onClick={fetchCatFact}>Get New Fact</button>\n  {fact && <p>{fact}</p>}\n</div>*/\n//);\n//}\n\n//export default CatFact;\nvar _c;\n$RefreshReg$(_c, \"CatFact\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","CatFact","_s","data","setData","fetchCatFact","fetch","then","response","json","apiData","catch","error","console","children","datadata","map","catFact","index","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/dennies/Development/code/phase-2/CatFacts-Project-App/src/components/CatFact.js"],"sourcesContent":["/*import React, { useState } from 'react';\n\nfunction CatFact() {\n  const [fact, setFact] = useState('');\n\n\n  var requestOptions = {\n    method: 'GET',\n    redirect: 'follow'\n  };\n  \n  fetch(\"https://meowfacts.herokuapp.com/\", requestOptions)\n    .then(response => response.json())\n    .then(result => console.log(result))\n    .catch(error => console.log('error', error));\n\n /*const fetchCatFact = async () => {\n    try {\n      const response = await fetch('https://meowfacts.herokuapp.com/');\n      if (response.ok) {\n        const data = await response.json();\n        const catFact = data.data;\n        console.log(catFact); // You can handle the catFact data as needed (e.g., updating state in a React component)\n      } else {\n        console.error('Failed to fetch cat fact');\n      }\n    } catch (error) {\n      console.error('Error fetching cat fact:', error);\n    }\n  };*/\n  \n  // Call the fetchCatFact function to fetch a cat fact\n  /*fetchCatFact();\n  \n\n  return (\n    <div className=\"content\">\n      <h2>Cat Fact</h2>\n      <button onClick={fetchCatFact}>Get New Fact</button>\n      {fact && <p>{fact}</p>}\n    </div>\n  );\n}\n\nexport default CatFact;*/\n\n/*import React, { useState } from 'react';\n\nfunction CatFact() {\n  const [fact, setFact] = useState('');\n\n  const fetchCatFact = () => {\n    // Fetch a random cat fact from an API (e.g., https://meowfacts.herokuapp.com/)\n    // and set the fact state.\n    fetch('https://meowfacts.herokuapp.com/')\n      .then((res) => res.json())\n      .then((data) => setFact(data.data))\n      .catch(() => console.error('Failed to fetch cat fact'));\n  };\n\n  return (\n    <div className=\"content\">\n      <h2>Cat Fact</h2>\n      <button onClick={fetchCatFact}>Get New Fact</button>\n      {fact ? <p>{fact}</p> : null}\n    </div>\n  );\n}\n\n  /*};\n\n  return (\n    <div className=\"content\">\n      <h2>Cat Fact</h2>\n      <button onClick={fetchCatFact}>Get New Fact</button>\n      {fact && <p>{fact}</p>}\n    </div>\n  );\n}*/\n\n//export default CatFact;\n\nimport React, { useState, useEffect } from 'react';\n\nfunction CatFact() {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    fetchCatFact();\n  }, []); // Empty dependency array ensures that this effect runs once after the initial render\n\n  const fetchCatFact = () => {\n    fetch('https://meowfacts.herokuapp.com/')\n      .then(response => response.json())\n      .then(apiData => {\n        // Assuming the API response is an array of cat facts, update the state\n        setData(apiData);\n      })\n      .catch(error => {\n        console.error('Error fetching cat facts:', error);\n      });\n  };\n\n  return (\n    <div>\n      {datadata.map((catFact, index) => (\n        <div key={index}>{catFact}</div>\n      ))}\n    </div>\n  );\n}\n\nexport default CatFact;\n\n    \n    \n    /*<div className=\"content\">\n      <h2>Cat Fact</h2>\n      <button onClick={fetchCatFact}>Get New Fact</button>\n      {fact && <p>{fact}</p>}\n    </div>*/\n  //);\n//}\n\n//export default CatFact;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEE;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,SAASC,OAAOA,CAAA,EAAG;EAAAC,EAAA;EACjB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAEpCC,SAAS,CAAC,MAAM;IACdO,YAAY,CAAC,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,MAAMA,YAAY,GAAGA,CAAA,KAAM;IACzBC,KAAK,CAAC,kCAAkC,CAAC,CACtCC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,OAAO,IAAI;MACf;MACAN,OAAO,CAACM,OAAO,CAAC;IAClB,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAI;MACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACnD,CAAC,CAAC;EACN,CAAC;EAED,oBACEZ,OAAA;IAAAc,QAAA,EACGC,QAAQ,CAACC,GAAG,CAAC,CAACC,OAAO,EAAEC,KAAK,kBAC3BlB,OAAA;MAAAc,QAAA,EAAkBG;IAAO,GAAfC,KAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAgB,CAChC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAACpB,EAAA,CA1BQD,OAAO;AAAAsB,EAAA,GAAPtB,OAAO;AA4BhB,eAAeA,OAAO;;AAIlB;AACJ;AACA;AACA;AACA;AACE;AACF;;AAEA;AAAA,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}